input LoginInput {
    username: String!
    password: String!
}

input RefreshTokenInput {
    refresh_token: String
}

type AuthPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
    user: User!
    roles: [String]!
}

type RegisterPayload {
    user: User!
}

type RefreshTokenPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    message: String
}

input ForgotPasswordInput {
    email: String! @rules(apply: ["required", "email"])
}

input NewPasswordWithCodeInput {
    email: String! @rules(apply: ["required", "email"])
    token: String! @rules(apply: ["required", "string"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input RegisterInput {
    first_name: String! @rules(apply: ["required", "string"])
    last_name: String! @rules(apply: ["required", "string"])
    phone_number: String! @rules(apply: ["required", "string", "unique:users,phone_number"])
    password:String @rules(apply:["min:6","same:input.password_confirmation"])
    email: String @rules(apply: ["email", "unique:users,email"])
    roles: [UserRoles!]!
    password_confirmation: String
    registration_source:RegistrationSource!
    gender: Gender! @rules(apply: ["required"])
    date_of_birth: Date
    marital_status: MaritalStatus
    occupation: String
    address: String!  @rules(apply: ["required", "string"])
    state_of_origin: String  @rules(apply: ["string"])
    bvn: String
    bank_account_number: String
    bank_account_name: String
    bank_name: String
    next_of_kin: String
    relationship_with_next_of_kin: String
    account_administrator: String
    account_name: String
    account_number: String
    status: AccountStatus!  @rules(apply: ["required"])
    company_id: ID!
    branch_id: ID!
    profile_picture: Upload
}

input AdminUserRegisterInput {
    first_name: String! @rules(apply: ["required", "string"])
    last_name: String! @rules(apply: ["required", "string"])
    phone_number: String! @rules(apply: ["required", "string", "unique:users,phone_number"])
    email: String @rules(apply: ["email", "unique:users,email"])
    company_id: ID!
    branch_id: ID!
    roles: [AdminUserRoles!]!
}

input UpdateUserProfileInput {
    user_id: ID!
    phone_number: String @rules(apply: ["string", "unique:users,phone_number"])
    gender: Gender
    date_of_birth: Date
    marital_status: MaritalStatus
    occupation: String
    address: String
    state_of_origin: String
    bvn: String
    bank_account_number: String
    bank_account_name: String
    bank_name: String
    next_of_kin: String
    relationship_with_next_of_kin: String
    account_name: String
    account_number: String
    profile_picture: Upload
}

extend type Mutation {
    login(input: LoginInput! @spread): AuthPayload! @field(resolver: "App\\GraphQL\\Mutations\\Login")
    refreshToken(input: RefreshTokenInput! @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput! @spread): ForgotPasswordResponse! @field(resolver: "App\\GraphQL\\Mutations\\ResetPassword")
    register(input: RegisterInput! @spread): RegisterPayload! @field(resolver: "App\\GraphQL\\Mutations\\RegisterUser")
    createAdminUser(input: AdminUserRegisterInput! @spread): User! @field(resolver: "App\\GraphQL\\Mutations\\CreateAdminUser")
    updateUserProfile(input: UpdateUserProfileInput! @spread): User! @field(resolver: "App\\GraphQL\\Mutations\\UpdateUserProfile")
}
